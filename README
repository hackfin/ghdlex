ghdlex demo distribution
----------------------------------------------------------------------------

This demonstrates usage of threading to remote control a VHDL simulation
from a C program (or Python via netpp, optionally).
More details about netpp:
  http://www.section5.ch/netpp

For all other details: Read the source, Luke.

For usage information, see LICENSE.txt

This is only tested under Linux. You need a working ghdl installation.

List of example simulations:

* simpipe: Simulates a simple I/O using a named pipe. This normally works
  in linux only. First, create two named pipes using the following command:

    mkfifo /tmp/sim_touser; mkfifo /tmp/sim_fromuser

  Then start simpipe and open two more windows, in one you can for example

    cat /tmp/sim_touser

  In the other, you can write to the simulation by

    cat > /tmp/sim_touser

These are netpp featured and will not be compiled by default (unless you
have netpp installed and pass the installation directory to 'make' using
the NETPP variable or an extra custom 'config.mk'.

* simfifo: Simulates a FIFO master/slave. When compiled with NETPP option
  set, start a netpp server only and wait for access to the 'Fifo' property.
  For some gory details about fifo status flags, see fifo.c

* simnetpp: A client example. Connects to the netpp example device (see
  devices/example/slave) and modifies the "ControlReg" property remotely.

* simfb: Connects to the remote 'display' server and shows a 256x256
  YUV color test image.

* simboard: Simulates a virtual board with various virtual port / I/Os

To compile the example, run 'make'. You will end up with a simulation
executable 'simpipe' which you can run without or with arguments, for
example:

  ./simpipe --stop-time=500ms --wave=test.ghw

Then you can for example try to the find the FIFO event with gtkwave:

  gtkwave test.ghw

To build the netpp featured variants, run

	make allnetpp

and wait for things to finish. You may have to run a "make clean" before that.

Cross compiling GHDLEX is only supported for mingw32. Run
	
	make MINGW32=1

to compile a library for the mingw32 cross compiler.

----------------------------------------------------------------------------
NETPP FEATURES

To test if your simulation is accessible through netpp, try this:

1) Start an example simulation, like simboard:

> ./simboard

2) Run the netpp client 'master':

> ./netpp/master/master localhost

This will output the properties of your virtual board:

Properties of Device 'VirtualBoard' associated with Hub 'TCP':
Child: [80000001] ':simboard:ram0:'
Child: [80000002] ':simboard:ram1:'
...


Likewise, you could mess with the simple FIFO loopback test implemented
in examples/board.vhdl:

> python test.py

This shows how the simulation is (remotely) accessed by a python script.

----------------------------------------------------------------------------
LIBRARY OPTIONS

As you might have figured out, there are two ways to enhance your VHDL
simulation:
1) By just adding the --vpi=netpp.vpi flag: This quickly exports the top level
   signals to netpp without you requiring to explicitely register anything.

2) By explicitely initializing NETPP from your simulation. See doxygen
   documentation.



----------------------------------------------------------------------------
EXPERIMENTAL

GHDL provides another way of extension via the VPI interface. This allows
to export pin names and manipulate signals by external DLLs that are loaded
dynamically. The netpp.vpi module gathers all signals from the top module
interface or virtual hardware modules and exports them to a netpp server,
meaning, they can be accessed and manipulated from outside via a netpp
client. This is based on a netpp version >=0.40 with support for dynamic
properties.
Since this approach makes use of multiple threads, it may not be 100% safe
for signal manipulation. This way of signal manipulation is also limited,
and not timing-accurate.

----------------------------------------------------------------------------

Have fun!

----------------------------------------------------------------------------
2011-2014, <hackfin@section5.ch>
