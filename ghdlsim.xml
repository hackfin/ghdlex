<?xml version="1.0" encoding="UTF-8"?>
<devdesc version="0.1"
         xsi:schemaLocation="http://www.section5.ch/dclib/schema/devdesc devdesc.xsd"
         xmlns="http://www.section5.ch/dclib/schema/devdesc"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns3="http://www.xmlmind.com/xmleditor/schema/bugreport"
         xmlns:ns2="http://www.w3.org/1999/xhtml"
         xmlns:ns="http://www.section5.ch/dclib/schema/devdesc"
         xmlns:memmap="http://www.section5.ch/dclib/schema/memmap"
         xmlns:interfaces="http://www.section5.ch/dclib/schema/interfaces"
         xmlns:html="http://www.xmlmind.com/xmleditor/schema/xhtml"
         xmlns:hfp="http://www.w3.org/2001/XMLSchema-hasFacetAndProperty">
  <vendor>section5</vendor>

  <!--// (c) 01/2007, Martin Strubel
// $Id: example.xml 309 2011-05-12 12:42:54Z strubi $
-->

  <revision>
    <major>0</major>

    <minor>1</minor>

    <extension>develop</extension>
  </revision>

  <header language="C">#include "example.h"
#include "threadaux.h"
#include "bus.h"</header>

  <header language="VHDL">library ghdlex; use ghdlex.iomap_config.all;</header>

  <!--This is a header file specification. Statements in this field will be included
in handler skeleton code and in the generated property list.
Including a header is necessary when implementing access to global variables.-->

  <returncodes>
    <errorspec code="-1024" name="STREAM_START">
      <info>Could not start stream (File I/O error)</info>
    </errorspec>

    <errorspec name="CAPTURE_START">
      <info>Could not start capture</info>
    </errorspec>

    <errorspec name="CAPTURE_STOP">
      <info>Could not stop capture</info>
    </errorspec>

    <errorspec name="VIDEO_QUEUE">
      <info>Video buffer queue error</info>
    </errorspec>

    <errorspec name="VIDEO_TIMEOUT">
      <info>Video frame timeout</info>
    </errorspec>

    <errorspec name="VIDEO_POLL">
      <info>Failed when polling for frame</info>
    </errorspec>

    <errorspec name="CAPTURE_STATUS">
      <info>Could not get capture status</info>
    </errorspec>

    <errorspec name="STREAM_WRITE">
      <info>Could not write stream (File I/O error)</info>
    </errorspec>

    <errorspec name="VIDEODEVICE_OPEN">
      <info>Could not open video device</info>
    </errorspec>

    <errorspec name="VIDEOBUF_ALLOC">
      <info>Could not allocate video buffers</info>
    </errorspec>

    <errorspec name="VIDEOBUF_MMAP">
      <info>Failed to mmap() video buffer</info>
    </errorspec>

    <errorspec name="VIDEOFORMAT">
      <info>Could not set video format</info>
    </errorspec>

    <errorspec name="STATE">
      <info>Bad machine state. Your code has a bug!</info>
    </errorspec>

    <errorspec name="VBUS_TIMEOUT">
      <info>Timeout on virtual Bus!</info>
    </errorspec>

    <errorspec name="I2C">
      <info>Could not access i2c bus</info>
    </errorspec>
  </returncodes>

  <device id="ghdlsim" name="GHDLSimInterface" protocol="PROPERTY">
    <revision>
      <major>0</major>

      <minor>2</minor>
    </revision>

    <!--A (virtual) register map:-->

    <registermap endian="LITTLE" id="fake" name="MMR" nodecode="true">
      <register access="RO" addr="0x00" id="decode_dummy">
        <info>The bit fields in this register are dummies with respect to address decoding.
They are used as bit slice defines within the VHDL top decoder section to
pick the proper address signals from the top level address bus (or VirtualBus)
For each I/O unit, a MMR_CFG_ entry is defined.
Later, these slice defines will be moved to the iomap definitions for the entire SoC
(see also memmap.xml for memory map)</info>

        <bitfield lsb="0" msb="6" name="CFG_localbus"/>

        <bitfield lsb="0" msb="6" name="CFG_netppbus"/>
      </register>
    </registermap>

    <registermap endian="BIG" id="localbus" name="FPGA_Registers"
                 offset="0x000" size="32">
      <info>This register map definition with maximum register address VBUS_ADDR_OFFSET-1 refers to an internal simulated RAM that is repeatedly read by regmap_read(). This map is not accessible directly by defined netpp properties.</info>

      <register access="RO" addr="0x00" id="MagicId" size="4"/>

      <register access="RO" addr="0x1c" id="Magic2" size="4"/>

      <register addr="0x08" id="TestIO">
        <bitfield lsb="0" msb="0" name="TEST_ENABLE"/>
      </register>

      <register access="RO" addr="0x7f" id="FwRev" size="1">
        <info>Firmware Revision MSB: major, LSB: Minor. Always at the end of the register map.</info>

        <bitfield lsb="0" msb="3" name="FWREV_MIN"/>

        <bitfield lsb="4" msb="7" name="FWREV_MAJ"/>
      </register>
    </registermap>

    <registermap endian="BIG" id="netppbus" name="Simulation">
      <info>Default simulation registers, typically exported as netpp properties</info>

      <register addr="0x00" id="SIMCONTROL" size="1">
        <info>Control register</info>

        <bitfield lsb="0" msb="0" name="ENABLE">
          <info>Enable FPGA engine</info>
        </bitfield>

        <bitfield lsb="1" msb="1" name="THROTTLE">
          <info>If set, slow down simulation</info>
        </bitfield>

        <bitfield lsb="4" msb="4" name="RESUME"/>

        <bitfield lsb="6" msb="6" name="IRQ">
          <info>Virtual IRQ pin, H active</info>
        </bitfield>

        <bitfield lsb="7" msb="7" name="RESET">
          <info>RESET FPGA engine</info>
        </bitfield>

        <default>00X0XX10</default>
      </register>

      <register access="RO" addr="0x04" id="SIMSTATUS">
        <bitfield lsb="0" msb="0" name="BREAK"/>
      </register>

      <register addr="0x08" id="SLEEPCYCLES" size="2">
        <default>2000</default>
      </register>
    </registermap>

    <group name="Simulation Control">
      <property access="RW" name="Timeout" type="INT">
        <info>Timeout value of FIFO in real microseconds</info>

        <variable>g_fifoconfig.timeout</variable>
      </property>

      <property access="RW" name="Retry" type="INT">
        <info>Number of retries after timeout</info>

        <variable>g_fifoconfig.retry</variable>
      </property>

      <property name="SimThrottle" type="BOOL">
        <regref bits="THROTTLE" ref="SIMCONTROL"/>
      </property>

      <property access="RW" name="Resume" type="BOOL">
        <regref bits="RESUME" ref="SIMCONTROL"/>
      </property>

      <property access="RO" name="Break" type="BOOL">
        <regref bits="BREAK" ref="SIMSTATUS"/>
      </property>
    </group>

    <group name="VirtualIO">
      <info>Virtual Input/Output. These properties can either control settings in the C library or map directly to a register. Depending on which register space they map to, the internal routines will either access the VirtualBus or the dummy register map (deprecated)</info>

      <!--Note: These can only map to Properties of the 'Simulation' register map.
-->

      <property access="RW" name="Enable" type="BOOL">
        <info>Enable bit. Might be not used.</info>

        <regref bits="ENABLE" ref="SIMCONTROL"/>
      </property>

      <property access="RW" name="Reset" type="BOOL">
        <info>External reset pin. High active.</info>

        <regref bits="RESET" ref="SIMCONTROL"/>
      </property>

      <property access="RW" name="Irq" type="BOOL">
        <info>Simulates an IRQ pin. High active. Might not be implemented in all cores.</info>

        <regref bits="IRQ" ref="SIMCONTROL"/>
      </property>
    </group>

    <group name="Templates">
      <info>This group only contains templates for internal generation of entities. Accessing them explicitely will have no effect or crash the system.</info>

      <struct hidden="true" id="ghdlex_fifo" name="Fifo">
        <property access="RW" id="fifobuf" name="Buffer" type="BUFFER">
          <!--A buffer object that is handled via a handler function. See handler.c
(Function get_fifo()/set_fifo() for details.)-->

          <info>A FIFO buffer for communication between VHDL simulation and external software.</info>

          <handler type="DYNAMIC">fifo</handler>
        </property>

        <property access="RO" id="fifo_infill" name="InFill" type="INT">
          <handler type="DYNAMIC">fifo_infill</handler>
        </property>

        <property access="RO" id="fifo_outfill" name="OutFill" type="INT">
          <handler type="DYNAMIC">fifo_outfill</handler>
        </property>
      </struct>

      <struct hidden="true" id="ghdlex_ram" name="RAM">
        <property access="RW" id="rambuf" name="Buffer" type="BUFFER">
          <!--A buffer object that is handled via a handler function. See handler.c
(Function get_fifo()/set_fifo() for details.)-->

          <info>A RAM proxy</info>

          <handler type="DYNAMIC">rambuf</handler>
        </property>

        <property access="RW" id="offset" name="Offset" type="INT">
          <handler type="DYNAMIC">ramoffset</handler>
        </property>
      </struct>

      <struct hidden="true" id="ghdlex_bus" name="Vbus">
        <info>Virtual Bus structure export to netpp.</info>

        <property access="RO" name="Width" type="INT">
          <handler type="DYNAMIC">vbus_width</handler>
        </property>

        <property name="Addr" type="REGISTER">
          <info>32 bit address, written first</info>

          <handler type="DYNAMIC">vbus_addr</handler>
        </property>

        <property name="DataBurst" type="BUFFER">
          <info>Buffer whose size must be a multiple of BusWidth. When read or written, a bus burst access is triggered.</info>

          <handler type="DYNAMIC">vbus_data</handler>
        </property>

        <property name="Data" type="REGISTER">
          <info>Data word. When read or written, a bus access is triggered.</info>

          <handler type="DYNAMIC">vbus_data</handler>
        </property>
      </struct>
    </group>
  </device>
</devdesc>
