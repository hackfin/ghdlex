-- /* Ignore the following two lines for THIS CHDL file. */
-- This file is generated from __FILE__
-- Modifications will be lost, please edit __FILE__
-- // This is a CPP template to create a VHDL file using the C preprocessor.
-- // C style comments are stripped from the resulting file.
-- (c) 2011-2013 Martin Strubel <hackfin@section5.ch>

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all; -- Unsigned

--! GHPI netpp wrapper package
--! Provides a few functions to access netpp master functionality from
--! the simulation.
--! \example dpram16.vhdl
--! \addtogroup GHPIfuncs
--! \{
package ghpi_netpp is
	----- GLOBAL SIGNALS -----

	--! Global throttle signal. If high, use as throttle signal
	--! to virtual FIFO implementations such as VirtualFX2Fifo.
	signal global_throttle  : std_logic := '1';

	----- NETPP SLAVE API -----


	--! Initializes the netpp slave structures for a simulation
	function netpp_init(name : string)
		return integer;

	----- NETPP MASTER API -----
	subtype  token_t       is integer;
	subtype  netpphandle_t is integer;
	type     handle_t      is access integer; 

   	-- The function wrapper appends a \000 character
	--! Opens a netpp target somewhere on the network
	function device_open(id: string)
		return netpphandle_t;
	--! Retrieves the netpp token by name
	function device_gettoken(h: netpphandle_t; id: string)
		return token_t;

	----- RAM API -----
	subtype  ram16_t       is unsigned(15 downto 0);
	subtype  byte_t        is unsigned(7 downto 0);
	subtype  regaddr_t     is unsigned(7 downto 0);
	type     rambuf_t      is access integer;

	--! Allocates a new virtual RAM
	--! @param size  Size in words (not bytes)
	--! @param name  A unique name, used for netpp export
	function ram_new(name : string; size : integer) return rambuf_t;

	----- FIFO API -----

	subtype fifoflag_t is unsigned(0 to 5);
	-- FIFO flag indices:
	constant RX  : natural := 0; --! in: Read advance, out: FIFO not empty
	constant TX  : natural := 1; --! in: Write advance, out: FIFO not full
	constant RXE : natural := 2; --! out: LOW when FIFO almost not empty
	constant TXF : natural := 3; --! out: LOW when FIFO almost full
	constant OVR : natural := 4; --! out: overrun bit. Write 1 to clear.
	constant UNR : natural := 5; --! out: underrun bit. W1C.

	-- FLAG assignments for FX2 emulation
	constant TX_PROG  : natural := 0;
	constant TX_EMPTY : natural := 1;
	constant RX_FULL  : natural := 2;


	--! Access type. These don't directly map into C struct pointers,
	--! see functions using duplexfifo_t_ghdl as arguments for example
	--! on how to access the handle in C.
	type     duplexfifo_t  is access integer;

	--! Allocates a new virtual FIFO
	--! @param name      A unique name, used for netpp export
	--! @param size      Size in words (not bytes)
	--! @param wordsize  Word size (1 or 2)
	function fifo_new(name : string; size : integer; wordsize : integer)
		return duplexfifo_t;

	----- NETPP BUS API -----

	type     bus_t         is access integer;
	--! Bus flags. 0: read, 1: write, 2: read ready
	subtype  busflag_t     is unsigned(0 to 2);

	function bus_new(name : string; wordsize : integer)
		return bus_t;
	
	----- NETPP REMOTE FRAMEBUFFER API -----

	subtype framebuffer_t is integer;
	subtype pixel_t is unsigned(15 downto 0);
	type pixarray_t is array(natural range <>) of pixel_t;

	constant VIDEOMODE_8BIT    : natural := 1; --! 8 Bit grayscale
	constant VIDEOMODE_UYVY    : natural := 3; --! UYVY 16 bpp mode
	constant VIDEOMODE_INDEXED : natural := 17; --! Indexed 16bit mode

#include "func_decl.chdl"

end package;

--! \}

package body ghpi_netpp is

	function netpp_init(name : string)
		return integer is
	begin
		return netpp_init_wrapped(name & NUL);
	end function;

	function device_open(id: string)
		return netpphandle_t is
		variable dev : netpphandle_t;
    begin
		dev := device_open_wrapped(id & NUL);
		if dev < 0 then
			assert false report "Failed to open netpp remote device"
				severity failure;
		end if;
		return dev;
	end device_open;

	function device_gettoken(h: netpphandle_t; id: string)
		return token_t is
    begin
		return device_gettoken_wrapped(h, id & NUL);
	end device_gettoken;

	-- Wrap functions with string parameter: Just append a null termination
	-- to become C standard compatible.

	function ram_new(name : string; size : integer) return rambuf_t is
	begin
		return ram_new_wrapped(name & NUL, size);
	end function;

	function fifo_new(name : string; size : integer; wordsize : integer )
		return duplexfifo_t is
	begin
		return fifo_new_wrapped(name & NUL, size, wordsize);
	end function;

	function bus_new(name : string; wordsize : integer )
		return bus_t is
	begin
		return bus_new_wrapped(name & NUL, wordsize);
	end function;

#include "func_body.chdl"

end package body;

